#!/bin/bash

#############
# Functions #
#############

# Get name of directory
function get_name {
	echo "$@" | grep -Eo '[^\/]+$'
}

# Logging
function log {
	[ $1 -le $pref_log_level ] && echo "$2" 1>&2
}

# Working with arrays: iterate '-{1}-{2}-' array(1 2) array(3 4) => -1-3- -2-4-
function iterate {
    local exp=$1; shift
    local result=""
    local size=$(eval echo '${#'$1'[@]}') # size of the first array
    
    for i in `eval echo \{1..$size\}`; do # 1, 2, ...
        local temp=$exp
        for j in `eval echo \{1..$#\}`; do # $1, $2, ...
            eval local array="\$$j"
            temp=$(echo $temp | sed "s/{$j}/\$\{$array[$((i-1))]\}/g")
        done
        eval temp="$temp"
        result=(${result[@]} $temp)
    done
    
    echo ${result[@]}
}

# Print help page
function show_help {
echo "
Usage: $0 [-hrvpu] [-t interval] SOURCE_DIR[.tar.gz] ... -- [COMMAND]

Technical:
 -h		- Show this page.
 -v		- Show info messages.

Mount Settings:
 SOURCE_DIR	- Path or name of directory that will be moved to tmpfs.

 -t interval	- Synchronize interval in seconds (default: 30, 0 to disable).
		  
 -p		- Do not delete directory from tmpfs after unmounting.
 -pp		- Similar to -p and do not delete files unpacked from archive.
		  
 -r		- Mount read only. Any changes in a tmpfs copy will not be
		  saved after unmounting. [DANGEROUS]

Execute scripts:
 COMMAND	- Execute this command after moving directory to tmpfs.
		  When command is finished, directory will be moved back.

Mount control:
 -u		- Unmount directory.
"
}

# Check parameters
[ $# -eq 0 ] && show_help && exit 1

# Defaults
pref_log_level=0
pref_sync_delay=30

# Parsing arguments
while getopts ":t:rhvpu" opt; do
	case $opt in
		t) pref_sync_delay="$OPTARG";;
		r) pref_read_only="true" ;;
		v) pref_log_level=$((pref_log_level+1)) ;;
		p) [ "$pref_save_in_ram" ] \
			&& pref_save_on_disk="true" \
			|| pref_save_in_ram="true" ;;
		u) mode_unmount="true" ;;
		*) show_help; exit ;;
	esac
done
shift $((OPTIND-1))

# Iterate through all arguments until "--"
while [ "$1" ]; do
	if [ "$1" == "--" ]; then
		shift
		pref_execute="$@"
		break
	fi

	source_list=(${source_list[@]} $1)
	shift
done

##############
# Initialize #
##############

# Find path to the biggest mounted tmpfs
tmpfs_mounts=$(mount | grep tmpfs | awk '{print $3}')
tmpfs_max_size=0
for tmpfs_mount in $tmpfs_mounts; do
	size=$(df --output=avail "$tmpfs_mount" | grep -Eo "[0-9]*")
	if [ $size -gt $tmpfs_max_size ] && \
	   touch "$tmpfs_mount/tmpfize-test" > /dev/null 2>&1 && \
	   rm "$tmpfs_mount/tmpfize-test" > /dev/null 2>&1
	then
		tmpfs_max_size=$size
		tmpfs=$tmpfs_mount
	fi
done

# Check for successfully found path to tmpfs
[ ! "$tmpfs" ] && log 0 "[Error] Tmpfs not found..." && exit 1
log 1 "[Info] Using tmpfs mounted in $tmpfs (size: $tmpfs_max_size KB)"

# Target directory
source=($(iterate '$(realpath -s {1})' source_list))

# Check for archive extension
pref_archive=($(iterate '$(echo "{1}" | grep -qE ".tar.gz$" && echo "true" || echo "false")' source))
# Remove .tar.gz extension from all sources
source=($(iterate '$(echo "{1}" | sed "s/\.tar\.gz$//g")' source))

# source_path: /path/to/
source_path=($(iterate '$(echo "{1}" | grep -Eo "^.*\/")' source))
# source_name: dir
source_name=($(iterate '$(get_name "{1}")' source))
# source_id: md5sum of full path
source_id=($(iterate '$(echo "{1}" | md5sum | grep -Eo "^[a-z0-9]+")' source))

# Generating paths
target=($(iterate "$tmpfs/tmpfize.{1}" source_id))
backup=($(iterate '{1}.tmpfize.{2}.{3}' source_path source_id source_name))
marker=($(iterate '{1}/.tmpfize' source))

#############
# Functions #
#############

# Unmount previously mounted directory
if [ "$mode_unmount" ]; then
    iterate '$([ -e "{1}" ] && rm "{1}")' marker > /dev/null # remove all markers
    echo "Waiting until all directories are unmounted..."
    markers=($(iterate '{1}\ {2}.packing' backup marker))
    while [ "$(iterate '$([ -e {1} ] && echo wait)' markers)" ]; do sleep 1; done
	exit 0
fi

# Back sequence
function back_sequence {
	if [ "$1" -ge 5 ]; then
	    # Synchronize files from tmpfs with backup
	    [ ! "$pref_read_only" ] && iterate '$(rsync -ax --delete "{1}/" "{2}")' target backup > /dev/null
	fi

	if [ "$1" -ge 4 ]; then
	    # Replace link with backup
	    iterate '$(rm {1}; mv {2} {1})' source backup > /dev/null
	fi
	
	if [ "$1" -eq 3 ]; then
	    # Synchronize files from backup and remove them
	    iterate '$(rsync -ax "{1}/" "{2}"; rm -r "{1}")' backup source > /dev/null
	fi

	if [ "$1" -ge 2 ]; then
	    # Remove files from tmpfs if set
		[ ! "$pref_save_in_ram" ] && iterate '$(rm -r "{1}")' target > /dev/null
		
		if [ "$pref_read_only" != "true" ]; then
		    # Create marker
		    iterate '$([ "{1}" == "true" ] && touch "{2}.packing")' pref_archive marker > /dev/null
		    
		    # Update archives
		    iterate '$([ "{1}" == "true" ] && tar -czf "{2}.tar.gz" -C "{3}" --exclude=".tmpfize*" "{4}")' \
		        pref_archive source source_path source_name > /dev/null
		    
		    # Remove marker
		    iterate '$([ "{1}" == "true" ] && rm "{2}.packing")' pref_archive marker > /dev/null
		    
		    # Remove files from disk if set
		    [ ! "$pref_save_on_disk" ] && iterate '$([ "{1}" == "true" ] && rm -r "{2}")'\
		        pref_archive source > /dev/null
		fi
	fi

	[ "$1" -ge 1 ] && [ "$1" -lt 5 ] && exit 1
}

# Background synchronization
function background_sync {
	count=0
	while [ ! "$(iterate '$([ -e '{1}' ] || echo stop)' marker)" ]; do # while all markers are existing
		if [ ! "$pref_read_only" ] && [ "$pref_sync_delay" -gt 0 ]; then
			if [ "$count" -lt "$pref_sync_delay" ]; then
				count=$((count+1))
			else
			    # Synchronize files from tmpfs with backup
			    iterate '$(rsync -ax --delete --exclude $(get_name "{1}") "{2}/" "{3}")' marker source backup > /dev/null
				count=0
			fi
		fi
		sleep 1
	done
	
	back_sequence 5
}

# Run process and keep tmpfize alive until it finishes
function process_watcher {
	if [ "$pref_execute" ]; then
		log 1 "[Info] Starting command ($pref_execute)"
		$pref_execute > /dev/null 2>&1
		iterate '$([ -e "{1}" ] && rm "{1}")' marker > /dev/null # remove all markers
	fi
}

###############################
# Moving $source to tmpfs #
###############################

# Level 1: Check if directory is already mouted
log 1 "[Info] Checking if directory is already mounted"
if [ "$(iterate '$([ -e {1} ] && echo true)' marker)" ]; then
    log 0 "[Error] Directory is already mouted!"
    back_sequence 1
fi

# Restore backup if exists and create if not
log 1 "[Info] Checking for backup"
function restore {
    if [ -e "$1" ]; then
	    log 0 "[Warning] Backup of $(get_name $2) is found. Restoring..."

	    if [ ! -d "$2" ]; then
		    rm "$2"
		    mv "$1" "$2"
	    else
		    rsync -ax "$1/" "$2" \
			    && rm -r "$1"
	    fi
    fi
}
iterate '$(restore "{1}" "{2}")' backup source > /dev/null

# Create source directory if it doesn't exist
iterate '$([ ! -e "{1}" ] && mkdir -p "{1}")' source > /dev/null

# Check free space in tmpfs
source_size=0
for i in ${source[@]}; do 
    size=$(du -s "$i" | awk '{print $1}' || echo 0)
    source_size=$((source_size+size))
done
if [ $source_size -ge $tmpfs_max_size ]; then
	log 0 "[Error] Not enough space in tmpfs!"
	exit 1
fi

# Level 2: Copying files from target directory to tmpfs

# Unpack archive if passed as main argument
function unpack {
    if [ "$1" == "true" ]; then
	    if [ -e "$2.tar.gz" ]; then
		    log 1 "[Info] Unpacking archive $3.tar.gz"
		    if ! tar --keep-newer-files -xzf "$2.tar.gz" -C "$4"; then
			    log 0 "[Error] Can't unpack archive $3.tar.gz!"
			    back_sequence 2
		    fi
	    else
		    log 1 "[Info] Archive $3.tar.gz not found. It will be created after unmount"
	    fi
    fi
}
iterate '$(unpack "{1}" "{2}" "{3}" "{4}")' pref_archive source source_name source_path > /dev/null

log 1 "[Info] Copying files to tmpfs"
if [ "$(iterate '$(rsync -ax --delete {1}/ {2} || echo false)' source target)" ]; then
    log 0 "[Error] Can not copy directory to tmpfs!"
    back_sequence 2
fi

# Level 3: Moving target directory from the way
log 1 "[Info] Renaming source directory"
if [ "$(iterate '$(mv {1} {2} || echo false)' source backup)" ]; then
    log 0 "[Error] Can not rename source directory"
    back_sequence 3
fi

# Level 4: Mounting tmpfs into target directory
log 1 "[Info] Creating symbolic link"
if [ "$(iterate '$(ln -s {1} {2} || echo false)' target source)" ]; then
    log 0 "[Error] Can not create symlink"
    back_sequence 4
fi

# Level 5: Run periodic synchronization in background
iterate '$(echo "Remove me to unmount" > "{1}")' marker > /dev/null
background_sync &
log 1 "[Info] Background synchronization started (PID=$!)"

# Run process (if set)
process_watcher &

exit 0
