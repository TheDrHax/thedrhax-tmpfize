#!/bin/bash

#############
# Functions #
#############

# Get name of directory
function get_name {
	echo "$@" | grep -Eo '[^\/]+$'
}

# Logging
function log {
	[ $1 -le $pref_log_level ] && echo "$2"
}

# Print help page
function show_help {
echo "
Usage: $0 [-hrvpu] [-t interval] SOURCE_DIR[.tar.gz] -- [COMMAND]

Technical:
 -h		- Show this page.
 -v		- Show info messages.

Mount Settings:
 SOURCE_DIR	- Path or name of directory that will be moved to tmpfs.

 -t interval	- Synchronize interval in seconds (default: 30, 0 to disable).
		  
 -p		- Do not delete directory from tmpfs after unmounting.
 -pp		- Similar to -p and do not delete files unpacked from archive.
		  
 -r		- Mount read only. Any changes in a tmpfs copy will not be
		  saved after unmounting. [DANGEROUS]

Execute scripts:
 COMMAND	- Execute this command after moving directory to tmpfs.
		  When command is finished, directory will be moved back.

Mount control:
 -u		- Unmount directory.
"
}

# Check parameters
[ $# -eq 0 ] && show_help && exit 1

# Defaults
pref_log_level=0
pref_sync_delay=30

# Parsing arguments
while getopts ":t:rhvpu" opt; do
	case $opt in
		t) pref_sync_delay="$OPTARG";;
		r) pref_read_only="true" ;;
		v) pref_log_level=$((pref_log_level+1)) ;;
		p) [ "$pref_save_in_ram" ] \
			&& pref_save_on_disk="true" \
			|| pref_save_in_ram="true" ;;
		u) mode_unmount="true" ;;
		*) show_help; exit ;;
	esac
done
shift $((OPTIND-1))

# Iterate through all arguments until "--"
while [ "$1" ]; do
	if [ "$1" == "--" ]; then
		shift
		pref_execute="$@"
		break
	fi

	source_list=(${source_list[@]} $1)
	shift
done

##############
# Initialize #
##############

# Find path to the biggest mounted tmpfs
tmpfs_mounts=$(mount | grep tmpfs | awk '{print $3}')
tmpfs_max_size=0
for tmpfs_mount in $tmpfs_mounts; do
	size=$(df --output=avail "$tmpfs_mount" | grep -Eo "[0-9]*")
	if [ $size -gt $tmpfs_max_size ] && \
	   touch "$tmpfs_mount/tmpfize-test" > /dev/null 2>&1 && \
	   rm "$tmpfs_mount/tmpfize-test" > /dev/null 2>&1
	then
		tmpfs_max_size=$size
		tmpfs=$tmpfs_mount
	fi
done

# Check for successfully found path to tmpfs
[ ! "$tmpfs" ] && log 0 "[Error] Tmpfs not found..." && exit 1
log 1 "[Info] Using tmpfs mounted in $tmpfs (size: $tmpfs_max_size KB)"

# Target directory
source=$(realpath -s "$source_list") # /path/to/dir

# Check for archive extension
if echo "$source" | grep -qE ".tar.gz$"; then
	pref_archive="true"
	source=$(echo "$source" | sed 's/.tar.gz$//g')
fi

source_path=$(echo "$source" | grep -Eo '^.*\/') # /path/to/
source_name=$(get_name "$source") # dir
source_id=$(echo "$source" | md5sum | grep -Eo "^[a-z0-9]+")

# Generating paths
target="$tmpfs/tmpfize.$source_id"
backup="$source_path/.tmpfize.$source_id.$source_name"
marker="$source/.tmpfize"

#############
# Functions #
#############

# Unmount previously mounted directory
if [ "$mode_unmount" ]; then
	if [ -e "$marker" ]; then
		rm "$marker"
		log 1 "Waiting until directory is unmouted..."
		while [ -e "$backup" ] || [ -e "$marker.packing" ]; do
			sleep 1;
		done
	else
		log 0 "[Error] Directory $source_name is not mounted!"
	fi
	
	exit 0
fi

# Back sequence
function back_sequence {
	if [ "$1" -ge 5 ]; then
		[ ! "$pref_read_only" ] \
			&& rsync -ax --delete "$target/" "$backup"
	fi

	if [ "$1" -ge 4 ]; then
		rm "$source"
		mv "$backup" "$source"
	fi
	
	if [ "$1" -eq 3 ]; then
		rsync -ax "$backup/" "$source"
		rm -r "$backup"
	fi

	if [ "$1" -ge 2 ]; then
		[ ! "$pref_save_in_ram" ] && rm -r "$target"
		
		if [ "$pref_archive" == "true" ] && [ "$pref_read_only" != "true" ]; then
			touch "$marker.packing"
			tar \
				-czf "$source.tar.gz"\
				-C "$source_path" \
				--exclude=".tmpfize*" \
				"$source_name"
			rm "$marker.packing"
			
			[ "$pref_save_on_disk" ] || rm -r "$source"
		fi
	fi

	[ "$1" -ge 1 ] && [ "$1" -lt 5 ] && exit 1
}

# Background synchronization
function background_sync {
	count=0
	while [ -e "$marker" ]; do
		if [ ! "$pref_read_only" ] && [ "$pref_sync_delay" -gt 0 ]; then
			if [ "$count" -lt "$pref_sync_delay" ]; then
				count=$((count+1))
			else
				rsync -ax --delete \
					--exclude $(get_name "$marker") \
					"$source/" "$backup"
				count=0
			fi
		fi
		sleep 1
	done
	
	back_sequence 5
}

# Run process and keep tmpfize alive until it finishes
function process_watcher {
	if [ "$pref_execute" ]; then
		log 1 "[Info] Starting command ($pref_execute)"
		$pref_execute > /dev/null 2>&1
		[ -e "$marker" ] && rm "$marker"
	fi
}

###############################
# Moving $source to tmpfs #
###############################

# Level 1: Check if directory is already mouted
log 1 "[Info] Checking if $source_name is already mounted"
if [ -e "$marker" ]; then
	log 0 "[Error] $source is already mounted!"
	back_sequence 1
fi

# Restore backup if exists and create if not
log 1 "[Info] Checking if backup of $source_name exists"
if [ -e "$backup" ]; then
	log 0 "[Warning] Backup of $source_name is found. Restoring..."

	if [ ! -d "$source" ]; then
		rm "$source"
		mv "$backup" "$source"
	else
		rsync -ax "$backup/" "$source" \
			&& rm -r "$backup"
	fi
fi
[ ! -e "$source" ] && mkdir -p "$source"

# Check free space in tmpfs
source_size=$(du -s "$source" | awk '{print $1}' || echo 0)
if [ $source_size -ge $tmpfs_max_size ]; then
	log 0 "[Error] Not enough space in tmpfs!"
	exit 1
fi

# Level 2: Copying files from target directory to tmpfs

# Unpack archive if passed as main argument
if [ "$pref_archive" == "true" ]; then
	if [ -e "$source.tar.gz" ]; then
		log 1 "[Info] Unpacking archive $source_name.tar.gz"
		if ! tar --keep-newer-files -xzf "$source.tar.gz" -C "$source_path"; then
			log 0 "[Error] Can't unpack archive $source_name.tar.gz!"

			back_sequence 2
		fi
	else
		log 1 "[Info] Archive $source_name.tar.gz not found. It will be created after unmount"
	fi
fi

log 1 "[Info] Copying files from $source_name to tmpfs"
if ! rsync -ax --delete "$source/" "$target"; then
	log 0 "[Error] Can't copy $source_name to tmpfs!"
	back_sequence 2
fi

# Level 3: Moving target directory from the way
log 1 "[Info] Renaming $source_name to $(get_name $backup)"
if ! mv "$source" "$backup"; then
	log 0 "[Error] Can't move $source_name to $(get_name $backup)"
	back_sequence 3
fi

# Level 4: Mounting tmpfs into target directory
log 1 "[Info] Creating symbolic link from $source_name to tmpfs"
if ! ln -s "$target" "$source"; then
	log 0 "[Error] Can't create symlink: $source"
	back_sequence 4
fi

# Level 5: Run periodic synchronization in background
echo "You can unmount current directory by removing this file" > "$marker"
background_sync &
log 1 "[Info] Background synchronization started (PID=$!)"

# Run process (if set)
process_watcher &

exit 0
